{"uuid":"ae4bf6f1-4a38-4f50-bf71-e68142321db7","test_framework_name":"Playwright","test_framework_version":"1.55.0","test_logs":[],"test_hooks_finished":{},"test_hooks_started":{},"test_uuid":"ae4bf6f1-4a38-4f50-bf71-e68142321db7","test_result":"failed","automate_session_name":"test-image-loading.spec.js - all shelf items should have an image [TC-1930]","test_file_path":"/Users/wahinya/Documents/Browserstack/september-testathon/testathon-live/tests/test-image-loading.spec.js","test_id":"b79b5a156a5009ac9b10-6bbea21b5bdf556be7a3","test_name":"all shelf items should have an image [TC-1930]","test_location":"/Users/wahinya/Documents/Browserstack/september-testathon/testathon-live/tests/test-image-loading.spec.js:6","test_code":"async ({\n  page\n}) => {\n  let testStatus = \"passed\";\n  const loginPage = new LoginPage(page);\n  const shelfPage = new ShelfPage(page);\n  try {\n    await loginPage.navigateToLoginPage(page);\n    await loginPage.login(process.env.IMAGE_USER_NAME, process.env.IMAGE_USER_PASS);\n    const usernameElement = page.locator(\"//span[@class='username']\");\n    await expect(usernameElement).toHaveText(process.env.IMAGE_USER_NAME);\n\n    // veriy all have image\n    await shelfPage.verifyAllHaveImages();\n  } catch (e) {\n    testStatus = \"failed\";\n    throw e;\n  } finally {\n    // Report status to BrowserStack safely\n    try {\n      await page.evaluate((_status, name) => {\n        window.browserstack_executor?.({\n          action: \"setSessionStatus\",\n          arguments: {\n            status: _status,\n            reason: \"Test completed\",\n            name\n          }\n        });\n      }, testStatus);\n    } catch (reportErr) {\n      console.warn(\"⚠️ Could not update BrowserStack session status:\", reportErr.message);\n    }\n  }\n}","test_tags":[],"test_started_at":"2025-09-23T09:55:13.214Z","test_scope":"test-image-loading.spec.js - all shelf items should have an image [TC-1930]","test_scopes":[],"test_rerun_name":" -latest:Windows 11-browserstack test-image-loading.spec.js all shelf items should have an image [TC-1930]","attachments":[{"name":"screenshot","path":"/Users/wahinya/Documents/Browserstack/september-testathon/testathon-live/test-results/test-image-loading-all-she-3b193-ould-have-an-image-TC-1930---latest-Windows-11-browserstack2/test-failed-1.png"}],"test_failure":[{"backtrace":["Error: Shelf item 0 should have an image","","expect(locator).toHaveAttribute(expected) failed","","Locator: locator('.shelf-item').first().locator('img')","Expected pattern: /.+/","Received string:  \"\"","Timeout: 5000ms","","Call log:","  - Shelf item 0 should have an image with timeout 5000ms","  - waiting for locator('.shelf-item').first().locator('img')","    9 × locator resolved to <img src=\"\" alt=\"iPhone 12\"/>","      - unexpected value \"\"","","    at ShelfPage.verifyAllHaveImages (/Users/wahinya/Documents/Browserstack/september-testathon/testathon-live/pages/cart/CartPage.js:25:65)","    at /Users/wahinya/Documents/Browserstack/september-testathon/testathon-live/tests/test-image-loading.spec.js:21:5"],"expanded":["message: Error: Shelf item 0 should have an image\n\n\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveAttribute\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m failed\n\nLocator: locator('.shelf-item').first().locator('img')\nExpected pattern: \u001b[32m/.+/\u001b[39m\nReceived string:  \u001b[31m\"\"\u001b[39m\nTimeout: 5000ms\n\nCall log:\n\u001b[2m  - Shelf item 0 should have an image with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('.shelf-item').first().locator('img')\u001b[22m\n\u001b[2m    9 × locator resolved to <img src=\"\" alt=\"iPhone 12\"/>\u001b[22m\n\u001b[2m      - unexpected value \"\"\u001b[22m\n","location: [object Object]","snippet: \u001b[90m   at \u001b[39m../pages/cart/CartPage.js:25\n\n\u001b[0m \u001b[90m 23 |\u001b[39m     \u001b[36mfor\u001b[39m (\u001b[36mlet\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m count\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\n \u001b[90m 24 |\u001b[39m       \u001b[36mconst\u001b[39m img \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mshelfItems\u001b[33m.\u001b[39mnth(i)\u001b[33m.\u001b[39mlocator(\u001b[32m\"img\"\u001b[39m)\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 25 |\u001b[39m       \u001b[36mawait\u001b[39m expect(img\u001b[33m,\u001b[39m \u001b[32m`Shelf item ${i} should have an image`\u001b[39m)\u001b[33m.\u001b[39mtoHaveAttribute(\n \u001b[90m    |\u001b[39m                                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 26 |\u001b[39m         \u001b[32m\"src\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 27 |\u001b[39m         \u001b[35m/.+/\u001b[39m\n \u001b[90m 28 |\u001b[39m       )\u001b[33m;\u001b[39m\u001b[0m"]}],"test_failure_type":"UnhandledError","test_failure_reason":"Error: Shelf item 0 should have an image\n\nexpect(locator).toHaveAttribute(expected) failed\n\nLocator: locator('.shelf-item').first().locator('img')\nExpected pattern: /.+/\nReceived string:  \"\"\nTimeout: 5000ms\n\nCall log:\n  - Shelf item 0 should have an image with timeout 5000ms\n  - waiting for locator('.shelf-item').first().locator('img')\n    9 × locator resolved to <img src=\"\" alt=\"iPhone 12\"/>\n      - unexpected value \"\"\n","logs":[],"test_ended_at":"2025-09-23T09:55:30.230Z","test_result_at":"2025-09-23T09:55:47.900Z","custom_metadata":{}}